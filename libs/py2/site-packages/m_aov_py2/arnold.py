# -*- coding: utf-8 -*-

import maya.cmds as cmds
import mtoa.aovs as aovs

from .abc.aov import AOVsABC


class ArnoldAOVPy2(AOVsABC):
    def __init__(self):
        pass

    def create_aov(self, name, aov_type=None, aov_filter=None):
        if name in self.exists_aovs:
            return None
        aov = aovs.AOVInterface().addAOV(name, aovType=aov_type)
        if not aov_filter:
            return None
        filter1 = cmds.listConnections(aov.node, type='aiAOVFilter')[0]
        cmds.setAttr('%s.aiTranslator' % filter1, aov_filter, type='string')
        return aov

    def create_crypto_matte(self):
        aovs.AOVInterface().addAOV('crypto_asset', aovShader='cryptomatte')
        aovs.AOVInterface().addAOV('crypto_material', aovShader='cryptomatte')
        aovs.AOVInterface().addAOV('crypto_object', aovShader='cryptomatte')

    def create_ao(self):
        ao_AOV = aovs.AOVInterface().addAOV('AO')
        ao_AOV_Name = ao_AOV.name
        new_material = cmds.shadingNode('aiAmbientOcclusion', asShader=True)
        # setAttr "aiAmbientOcclusion2.samples" 6;
        cmds.setAttr("{}.samples".format(new_material), 6)
        try:
            cmds.connectAttr("{}.outColor".format(new_material), "aiAOV_{}.defaultValue".format(ao_AOV_Name))
        except:
            pass

    def all_light_group(self, name):
        cmds.setAttr('%s.lightGroups' % name, 1)

    def delete_aov(self, name):
        aovs.AOVInterface().removeAOV(name)

    @property
    def exists_aovs(self):
        aov_interface = aovs.AOVInterface()
        existing_aovs = aov_interface.getAOVs()
        return existing_aovs
