# -*- coding: utf-8 -*-
from m_maya_py2.src.node import MayaNode
from typing import Optional, AnyStr, Union, Any, Generator


class MayaGroup(MayaNode):
    def __init__(self, node_path):
        # type: (Optional[AnyStr]) -> None
        super(MayaGroup, self).__init__(node_path)
        self.node_path = node_path

    def create_new(self, name, return_group=False):
        # type: (str,bool) -> Union['MayaNode','MayaGroup']
        group_name = self.cmds.group(n=name, empty=True)
        return MayaNode(group_name) if not return_group else MayaGroup(group_name)

    def ensure_node_creation(self):
        """
        确保指定的节点在 Maya 场景中存在。如果该节点（或其层级路径中的任何部分）不存在，则自动创建它。

        该函数会遍历节点的层级路径，逐级检查是否存在：
        1. 如果节点已存在，则直接返回，不做任何操作。
        2. 将节点路径按 `|` 拆分成层级部分（例如 `"root|group|node_path"`）。
        3. 逐层检查节点是否存在：
        - 若某一级已存在，则继续检查下一级。
        - 若某一级不存在，则创建该级节点：
        - 如果有父级，则在父级下创建子节点。
        - 如果没有父级（顶级节点），则创建一个新的组节点。

        ### **示例**
        假设 `self.node_path = "group1|subgroup|myNode"`，且 Maya 场景中：
        - `"group1"` **已存在**
        - `"subgroup"` 和 `"myNode"` **不存在**

        运行该函数后：
        - `"subgroup"` 会被创建并挂载在 `"group1"` 下。
        - `"myNode"` 会被创建并挂载在 `"subgroup"` 下。

        ### **依赖**
        - 使用 `MayaNode` 来检查节点是否存在。
        - 使用 `MayaGroup` 来创建新的组节点并添加子节点。

        """
        if self.exists:
            return
        path_parts = self.node_path.split("|")
        for i in range(1, len(path_parts) + 1):
            partial_path = "|".join(path_parts[:i])
            maya_node = MayaNode(partial_path)
            if maya_node.exists:
                continue
            build_name = partial_path.split("|")[-1].strip()
            parent = "|".join(path_parts[:i - 1]) if i > 1 else None
            if parent:
                parent_node = MayaGroup(parent)
                parent_node.add_child(build_name)
            else:
                group = MayaGroup(self.node_path)
                group.create_new(build_name)

    def add_child(self, name, return_group=False):
        # type: (str,bool) -> Union['MayaNode','MayaGroup']
        group = self.cmds.group(n=name, empty=True)
        self.cmds.parent(group, self.node_path)
        return MayaNode(group) if not return_group else MayaGroup(group)

    def add_children(self, names, return_group=False):
        # type: (str,bool) -> Generator[Union['MayaNode','MayaGroup']]
        for n in names:
            yield self.add_child(n, return_group)
