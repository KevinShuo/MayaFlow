# -*- coding: utf-8 -*-
import os
import tempfile

from enum import Enum
from .base import MayaBasePy2


class SaveType(Enum):
    ma = "mayaAscii"
    mb = "mayaBinary"


class MayaFileOperatorPy2:
    def __init__(self):
        self._maya_base = MayaBasePy2()

    def new(self, force=False):
        # type: (bool) -> MayaFileOperatorPy2
        self.cmds.file(new=True, f=force)
        return self

    def open(self, url, force=False):
        # type: (str,bool) -> MayaFileOperatorPy2
        self.cmds.file(url, o=True, f=force)
        return self

    def import_file(self, file_path, name_space=None):
        """
        Import a file into Maya while preserving its internal references and optionally applying a namespace.

        Args:
            file_path (str): Path to the file to import.
            name_space (str, optional): Namespace to apply to the imported content. Defaults to None.
        """
        if name_space:
            # Ensure the namespace exists or create it
            if not self.cmds.namespace(exists=name_space):
                self.cmds.namespace(add=name_space)

            # Import file with namespace and preserve its internal references
            self.cmds.file(file_path, i=True, rnn=True, namespace=name_space)
        else:
            # Import file without namespace
            self.cmds.file(file_path, i=True, rnn=True)

    def save(self, save_type, force=False):
        # type: (SaveType,bool) -> MayaFileOperatorPy2
        self.cmds.file(save=True, type=save_type.value, force=force)
        return self

    def save_as(self, url, save_type, force=False):
        # type: (str,SaveType,bool) -> MayaFileOperatorPy2
        dir_path = os.path.dirname(url)
        if not os.path.exists(dir_path):
            raise ValueError("Directory '{}' does not exist".format(dir_path))
        self.cmds.file(rename=url.replace("\\", "/"))
        self.save(save_type.value, force=force)

    def save_as_temp_file(self, file_name, save_type=SaveType.ma):
        temp_dir = tempfile.gettempdir()
        maya_temp = os.path.join(temp_dir, "maya_temp", "scene")
        if not os.path.exists(maya_temp):
            os.makedirs(maya_temp)
        full_path = os.path.join(maya_temp, file_name).replace("\\", "/")
        self.cmds.file(rename=str(full_path))
        self.cmds.file(save=True, type=save_type.value, force=True)
        return full_path

    def add_file_info(self, info_data):
        for key, value in info_data.items():
            self.cmds.fileInfo(key, value)

    def remove_file_info(self, key):
        self.cmds.fileInfo(rm=key)

    def get_file_info(self, key):
        data = self.cmds.fileInfo(key, query=True)
        return data[0] if data else None

    def has_file_info(self, key):
        return True if self.cmds.fileInfo(key, query=True) else False

    def load_reference(self, file_path, check_exists=True):
        """
        Load a reference file into the Maya scene.

        Args:
            file_path (str): Path to the file to reference.
            check_exists (bool): If True, avoid loading the file if it is already referenced.

        Returns:
            Optional[List[str]]: The reference node names created, or None if the file was already referenced.
        """
        # Normalize file path for consistent comparison
        file_path_normalized = os.path.normpath(file_path)

        # Check if the file is already referenced
        if check_exists:
            all_references = self.cmds.file(query=True, reference=True) or []
            for ref in all_references:
                ref_file = self.cmds.referenceQuery(ref, filename=True)
                if os.path.normpath(ref_file) == file_path_normalized:
                    print("File is already referenced: {}".format(file_path))
                    return None

        # Derive a unique namespace from the file name
        namespace_name = os.path.splitext(os.path.basename(file_path))[0]

        try:
            # Load the reference with the derived namespace
            ref_nodes = self.cmds.file(
                file_path_normalized,
                reference=True,
                returnNewNodes=True,
                namespace=namespace_name
            )
            print("Successfully loaded reference: {}".format(file_path))
            return ref_nodes
        except Exception as e:
            print("Failed to load reference '{}': {}".format(file_path, e))
            return None

    @property
    def path(self):
        return self.cmds.file(q=1, sn=1)

    @property
    def cmds(self):
        return self._maya_base.cmds()
