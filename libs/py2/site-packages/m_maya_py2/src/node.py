# -*- coding: utf-8 -*-

import enum
from m_maya_py2.src.base import MayaBasePy2
from typing import Optional


class MayaNodeType(enum.Enum):
    mayaUsdProxyShape = 0


class MayaNodePy2(object):
    def __init__(self, node_path):
        # type: (Optional[str]) -> None
        self._maya_base = MayaBasePy2()
        self.node_path = node_path

    def __str__(self):
        return self.node_path

    def __repr__(self):
        return "<node_path: %s>" % self.node_path

    def __add__(self, other):
        if not isinstance(other, MayaNodePy2):
            raise TypeError("Can only add MayaNodes")
        if not str(self.node_path).startswith("|"):
            node = MayaNodePy2("|{}|{}".format(self.node_path, other.node_path))
            if not node.exists:
                raise TypeError("MayaNodePy2 {} doesn't exist".format(self.node_path))
            return node
        else:
            node = MayaNodePy2("{}|{}".format(self.node_path, other.node_path))
            if not node.exists:
                raise TypeError("MayaNodePy2 {} doesn't exist".format(self.node_path))
            return node

    @staticmethod
    def create_node(name, node_type):
        # type: (str,MayaNodeType) -> 'MayaNodePy2'
        import maya.cmds as cmds
        node = cmds.createNode(node_type.name, n=name)
        return MayaNodePy2(node)

    def select_one(self):
        # type: () -> None
        self.cmds.select(clear=True)
        self.cmds.select(self.node_path)

    def add_select(self):
        self.cmds.select(self.node_path, add=True)

    def add_select_with_names(self, names):
        for name in names:
            self.cmds.select(name, add=True)

    def rename(self, new_name):
        # type: (str) -> 'MayaNodePy2'
        new_node = self.cmds.rename(self.node_path, new_name)
        return MayaNodePy2(new_node)

    def delete(self):
        self.cmds.delete(self.node_path)

    def move(self, new_position):
        # type: (str) -> 'MayaNodePy2'
        new_path = self.cmds.move(self.node_path, new_position)
        return MayaNodePy2(new_path)

    def move_to_parent(self):
        return self.move(self.parents[0].node_path.parents[0].node_path)

    @property
    def type(self):
        # type: () -> str
        return self.cmds.nodeType(self.node_path)

    @property
    def exists(self):
        # type: () -> bool
        if not self.cmds.ls(self.node_path):
            return False
        return True

    @property
    def iter_parents(self):
        parents = self.cmds.listRelatives(self.node_path, parent=True, f=True)
        if not parents:
            return
        for parent in parents:
            yield MayaNodePy2(parent)

    @property
    def parents(self):
        return tuple([MayaNodePy2(i) for i in self.cmds.listRelatives(self.node_path, parent=True, f=True)])

    def descendents(self):
        from m_maya_py2.src.attribute import MayaAttributePy2
        descendents = self.cmds.listRelatives(self.node_path, ad=True)
        if not descendents:
            return
        for descendent in descendents:
            yield MayaAttributePy2(MayaNodePy2(descendent))

    @property
    def cmds(self):
        return self._maya_base.cmds()

    @property
    def mel(self):
        return self._maya_base.mel()

    @property
    def long_path(self):
        if not isinstance(self.node_path, str):
            raise TypeError("node_path must be a string")
        return self.cmds.ls(self.node_path, l=True)

    def _check_node_exist(self):
        if not self.cmds.ls(self.node_path):
            raise AttributeError("{} does not exist".format(self.node_path))
