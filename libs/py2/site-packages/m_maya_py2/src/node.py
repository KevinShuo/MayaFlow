# -*- coding: utf-8 -*-
import traceback

try:
    import enum
    from typing import Union
except:
    print(traceback.format_exc())

from m_maya_py2.src.base import MayaBasePy2
from m_maya_py2.src.group import MayaGroup
from m_maya_py2.src.plugins.attribute import MayaAttribute


class MayaNodeType(enum.Enum):
    mayaUsdProxyShape = 0


class MayaNode:
    def __init__(self, node_path):
        # type: (Union[str]) -> None
        self._maya_base = MayaBasePy2()
        self.node_path = node_path

    def __str__(self):
        return self.node_path

    def __repr__(self):
        return "<node_path: %s>" % self.node_path

    def __add__(self, other):
        if not isinstance(other, MayaNode):
            raise TypeError("Can only add MayaNodes")
        if not str(self.node_path).startswith("|"):
            node = MayaNode("|{}|{}".format(self.node_path, other.node_path))
            if not node.exists:
                raise TypeError("MayaNode {} doesn't exist".format(self.node_path))
            return node
        else:
            node = MayaNode("{}|{}".format(self.node_path, other.node_path))
            if not node.exists:
                raise TypeError("MayaNode {} doesn't exist".format(self.node_path))
            return node

    @staticmethod
    def create_node(name, node_type):
        # type: (str,MayaNodeType) -> 'MayaAttribute'
        import maya.cmds as cmds
        node = cmds.createNode(node_type.name, n=name)
        return MayaAttribute(MayaNode(node))

    def create_new_group(self, name):
        # type: (str) -> 'MayaAttribute'
        if self.exists:
            raise AttributeError('Group already exists')
        group_name = self.cmds.group(n=name, empty=True)
        return MayaAttribute(MayaNode(group_name))

    def ensure_node_creation(self):
        """
        确保指定的节点在 Maya 场景中存在。如果该节点（或其层级路径中的任何部分）不存在，则自动创建它。

        该函数会遍历节点的层级路径，逐级检查是否存在：
        1. 如果节点已存在，则直接返回，不做任何操作。
        2. 将节点路径按 `|` 拆分成层级部分（例如 `"root|group|node_path"`）。
        3. 逐层检查节点是否存在：
           - 若某一级已存在，则继续检查下一级。
           - 若某一级不存在，则创建该级节点：
             - 如果有父级，则在父级下创建子节点。
             - 如果没有父级（顶级节点），则创建一个新的组节点。

        ### **示例**
        假设 `self.node_path = "group1|subgroup|myNode"`，且 Maya 场景中：
        - `"group1"` **已存在**
        - `"subgroup"` 和 `"myNode"` **不存在**

        运行该函数后：
        - `"subgroup"` 会被创建并挂载在 `"group1"` 下。
        - `"myNode"` 会被创建并挂载在 `"subgroup"` 下。

        ### **依赖**
        - 使用 `MayaNode` 来检查节点是否存在。
        - 使用 `MayaGroup` 来创建新的组节点并添加子节点。

        """
        if self.exists:
            return
        path_parts = self.node_path.split("|")
        for i in range(1, len(path_parts) + 1):
            partial_path = "|".join(path_parts[:i])
            maya_node = MayaNode(partial_path)
            if maya_node.exists:
                continue
            build_name = partial_path.split("|")[-1].strip()
            parent = "|".join(path_parts[:i - 1]) if i > 1 else None
            if parent:
                parent_node = MayaGroup(parent)
                parent_node.add_child_current(build_name)
            else:
                group = MayaGroup(self.node_path)
                group.create_new_group(build_name)

    def select_one(self):
        # type: () -> None
        self.cmds.select(clear=True)
        self.cmds.select(self.node_path)

    def add_select(self):
        self.cmds.select(self.node_path, add=True)

    def add_select_with_names(self, names):
        for name in names:
            self.cmds.select(name, add=True)

    def rename(self, new_name):
        # type: (str) -> 'MayaAttribute'
        new_node = self.cmds.rename(self.node_path, new_name)
        return MayaAttribute(new_node)

    def delete(self):
        self.cmds.delete(self.node_path)

    def move(self, new_position):
        # type: (str) -> 'MayaAttribute'
        new_path = self.cmds.move(self.node_path, new_position)
        return MayaAttribute(MayaNode(new_path))

    def move_to_parent(self):
        return self.move(self.parents[0].node.parents[0].node_path)

    @property
    def type(self):
        # type: () -> str
        return self.cmds.nodeType(self.node_path)

    @property
    def exists(self):
        # type: () -> bool
        if not self.cmds.ls(self.node_path):
            return False
        return True

    @property
    def iter_parents(self):
        parents = self.cmds.parent(self.node_path, parent=True, f=True)
        if not parents:
            return
        for parent in parents:
            yield MayaAttribute(MayaNode(parent))

    @property
    def parents(self):
        return tuple(self.iter_parents)

    def descendents(self):
        descendents = self.cmds.listRelatives(self.node_path, ad=True)
        if not descendents:
            return
        for descendent in descendents:
            yield MayaAttribute(MayaNode(descendent))

    @property
    def cmds(self):
        return self._maya_base.cmds()

    @property
    def mel(self):
        return self._maya_base.mel()

    @property
    def long_path(self):
        if not isinstance(self.node_path, str):
            raise TypeError("node_path must be a string")
        return self.cmds.ls(self.node_path, l=True)
