# -*- coding: utf-8 -*-
import os
from typing import Dict, Any

from m_deadline_cmd.base import DeadlineCmdBase


class JobPluginBase(DeadlineCmdBase):
    def __init__(self):
        super().__init__()

    def create_cache(self, save_path: str, data: Dict[str, Any]):
        """
        构建并保存任务数据到指定路径

        根据 `data` 字典中的数据，生成一个包含所有键值对的字符串，并将其保存到指定路径的文件中。如果目标目录不存在，会自动创建该目录。

        :param save_path: 文件保存路径，类型为字符串（`str`）。该路径指定了任务数据保存的文件位置。
            - 文件将被保存到该路径，并写入每个键值对（`key=value`）的格式。
        :param data: 任务数据，类型为 `Dict[str, Any]`，包含所有需要保存到文件的键值对。
            - 例如，可以是任务的配置信息或其他相关数据。
        :return: 无返回值。
        """
        parent_dir = os.path.dirname(save_path)
        # 如果目标目录不存在，自动创建
        if not os.path.exists(parent_dir):
            os.makedirs(parent_dir)

        # 将字典数据转换为 'key=value' 格式并写入文件
        with open(save_path, 'w') as f:
            result = '\n'.join([f"{key}={value}" for key, value in data.items()])
            f.write(result)
