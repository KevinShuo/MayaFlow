# -*- coding: utf-8 -*-
import os
from typing import Dict, Any, Union

from m_deadline_cmd.builder.job_plugin_base import JobPluginBase
from m_deadline_cmd.modules.dataclass import ArnoldVerbose, RenderType, MayaVersion


class MayaPluginBuilder(JobPluginBase):
    def __init__(self):
        super().__init__()
        self.plugin_data = {
            "IgnoreError211": 1,
            "RenderSetupIncludeLights": 1,
            "StrictErrorChecking": 1,
            "UseLegacyRenderLayers": 0,
            "UseLocalAssetCaching": 0,
            "UsingRenderLayers": 1,
            "Build": "64bit",
            "MayaToArnoldVersion": 4
        }

    def set_animation(self, anim: bool = True) -> 'MayaPluginBuilder':
        """
        设置插件的动画选项

        根据给定的布尔值 `anim`，设置插件的动画选项。如果 `anim` 为 `True`，则将 `Animation` 设置为 1，表示启用动画。
        如果 `anim` 为 `False`，则将 `Animation` 设置为 0，表示禁用动画。

        :param anim: 布尔值，类型为 `bool`，用于控制动画选项的启用与禁用。默认为 `True`，表示启用动画。
        :return: 返回当前对象 (`MayaPluginBuilder`)，以支持链式调用。
        """
        if anim:
            self.plugin_data['Animation'] = 1
        else:
            self.plugin_data['Animation'] = 0
        return self

    def set_arnold_verbose(self, verbose: ArnoldVerbose) -> 'MayaPluginBuilder':
        """
        设置 Arnold 渲染器的详细信息输出级别

        根据给定的 `verbose` 参数设置 Arnold 渲染器的详细信息输出级别。
        `verbose` 是一个 `ArnoldVerbose` 枚举类型，包含不同的输出级别。
        设置该选项可以帮助控制 Arnold 渲染时的日志输出信息的详细程度。

        :param verbose: `ArnoldVerbose` 枚举值，类型为 `ArnoldVerbose`，表示 Arnold 渲染器的日志详细输出级别。
            - `verbose` 参数通常是一个枚举值，具有不同的详细级别。
        :return: 返回当前对象 (`MayaPluginBuilder`)，以支持链式调用。
        """
        self.plugin_data['ArnoldVerbose'] = verbose.value
        return self

    def set_build(self, build: str = "64bit") -> 'MayaPluginBuilder':
        """
        设置插件的构建类型

        根据给定的 `build` 字符串设置插件的构建类型。常见的构建类型包括 `64bit`
         或其他平台相关的构建类型。此选项控制插件使用的系统架构。

        :param build: 构建类型，类型为字符串（`str`）。默认为 `"64bit"`，表示插件使用 64 位构建。
            - 该参数可以指定为不同的构建类型，具体取决于插件的要求。
        :return: 返回当前对象 (`MayaPluginBuilder`)，以支持链式调用。
        """
        self.plugin_data['Build'] = build
        return self

    def set_camera(self, camera_name: str) -> 'MayaPluginBuilder':
        """
        设置插件的相机名称

        根据给定的相机名称 `camera_name` 设置插件所使用的相机。该相机名称会存储在插件的数据中，用于后续的渲染或处理任务。

        :param camera_name: 相机名称，类型为字符串（`str`），表示用于渲染或其他任务的相机名称。
            - 该参数应为有效的相机名称，通常是场景中的相机对象的名称。
        :return: 返回当前对象 (`MayaPluginBuilder`)，以支持链式调用。
        """
        self.plugin_data['Camera'] = camera_name
        return self

    def set_ignore_error_211(self, ignore: bool = True) -> 'MayaPluginBuilder':
        """
        设置是否忽略错误 211

        根据给定的 `ignore` 参数决定是否忽略错误 211。若 `ignore` 为 `True`，
        则将 `IgnoreError211` 设置为 1，表示忽略错误 211；若 `ignore` 为 `False`，
        则将 `IgnoreError211` 设置为 0，表示不忽略该错误。

        :param ignore: 布尔值，类型为 `bool`，用于控制是否忽略错误 211。默认为 `True`，表示忽略该错误。
            - `True`：忽略错误 211
            - `False`：不忽略错误 211
        :return: 返回当前对象 (`MayaPluginBuilder`)，以支持链式调用。
        """
        if ignore:
            self.plugin_data['IgnoreError211'] = 1
        else:
            self.plugin_data['IgnoreError211'] = 0
        return self

    def set_width_height(self, width: int, height: int) -> 'MayaPluginBuilder':
        """
        设置图像的宽度和高度

        根据给定的宽度 `width` 和高度 `height` 设置插件的输出图像尺寸。该方法将宽度和高度存储在插件的数据中，
        用于后续的渲染或图像处理任务。

        :param width: 图像的宽度，类型为 `int`，表示图像的宽度。
        :param height: 图像的高度，类型为 `int`，表示图像的高度。
        :return: 返回当前对象 (`MayaPluginBuilder`)，以支持链式调用。
        """
        self.plugin_data['ImageWidth'] = width
        self.plugin_data['ImageHeight'] = height
        return self

    def local_rendering(self, use_local: bool = True) -> 'MayaPluginBuilder':
        """
        设置是否启用本地渲染\n
        如果启用，Deadline 将在本地渲染帧，然后再将其复制到最终网络位置。在某些情况下，这可以提高 Maya 渲染的速度。

        根据给定的 `use_local` 参数决定是否启用本地渲染。若 `use_local` 为 `True`，则将 `LocalRendering`
        设置为 1，表示启用本地渲染；若 `use_local` 为 `False`，则将 `LocalRendering` 设置为 0，表示禁用本地渲染。

        :param use_local: 布尔值，类型为 `bool`，控制是否启用本地渲染。默认为 `True`，表示启用本地渲染。
            - `True`：启用本地渲染。
            - `False`：禁用本地渲染。
        :return: 返回当前对象 (`MayaPluginBuilder`)，以支持链式调用。
        """
        if use_local:
            self.plugin_data['LocalRendering'] = 1
        else:
            self.plugin_data['LocalRendering'] = 0
        return self

    def set_output_file_path(self, output_file_path: str) -> 'MayaPluginBuilder':
        """
        设置输出文件夹路径

        根据给定的 `output_file_path` 设置插件输出文件的存储路径。该路径将用于存储渲染结果或其他插件生成的文件。

        :param output_file_path: 输出文件路径，类型为字符串（`str`），表示文件存储的目标路径。
            - 该路径可以是绝对路径或相对路径，通常用于指定渲染结果、日志或其他文件的保存位置。
        :return: 返回当前对象 (`MayaPluginBuilder`)，以支持链式调用。
        """
        self.plugin_data['OutputFilePath'] = output_file_path
        return self

    def set_output_file_prefix(self, output_file_prefix: str) -> 'MayaPluginBuilder':
        """
        设置输出文件前缀

        根据给定的 `output_file_prefix` 设置插件输出文件的前缀。该前缀会应用于生成的所有输出文件名，用于帮助区分不同的渲染任务或文件类型。

        :param output_file_prefix: 输出文件前缀，类型为字符串（`str`），表示输出文件名前的固定部分。
            - 该前缀可以用于组织文件，通常与文件的后缀（如 `.exr` 或 `.png`）结合使用，形成完整的文件名。
        :return: 返回当前对象 (`MayaPluginBuilder`)，以支持链式调用。
        """
        self.plugin_data['OutputFilePrefix'] = output_file_prefix
        return self

    def set_project_path(self, project_path: str) -> 'MayaPluginBuilder':
        """
        设置项目路径

        根据给定的 `project_path` 设置插件的项目路径。该路径通常指向与渲染任务相关的项目文件夹或资源目录。

        :param project_path: 项目路径，类型为字符串（`str`），表示项目文件或资源的所在目录。
            - 该路径可以是项目的根目录或特定资源（如纹理、场景文件等）所在的路径。
        :return: 返回当前对象 (`MayaPluginBuilder`)，以支持链式调用。
        """
        self.plugin_data['ProjectPath'] = project_path
        return self

    def set_render_layer(self, render_layer: str) -> 'MayaPluginBuilder':
        """
        设置渲染层

        根据给定的 `render_layer` 设置插件的渲染层。渲染层用于在渲染过程中分离不同的元素或通道，使得每个渲染层可以单独处理和输出特定的场景元素。

        :param render_layer: 渲染层名称，类型为字符串（`str`），表示渲染层的名称。
            - 渲染层通常用于将场景分成不同的层次，例如背景、角色、特效等，以便分别渲染或合成。
        :return: 返回当前对象 (`MayaPluginBuilder`)，以支持链式调用。
        """
        self.plugin_data['RenderLayer'] = render_layer
        return self

    def set_render(self, render_type: RenderType) -> 'MayaPluginBuilder':
        """
        设置渲染类型

        根据给定的 `render_type` 设置插件的渲染类型。渲染类型用于指定渲染任务的方式，例如选择不同的渲染引擎或渲染模式。

        :param render_type: 渲染类型，类型为 `RenderType` 枚举，表示渲染的方式或类型。
            - 渲染类型通常用于选择具体的渲染引擎（如 Arnold、V-Ray）或渲染模式（如批量渲染、分布式渲染）。
        :return: 返回当前对象 (`MayaPluginBuilder`)，以支持链式调用。
        """
        self.plugin_data['RenderType'] = render_type.name
        return self

    def set_scene_file(self, scene_file: str) -> 'MayaPluginBuilder':
        """
        设置场景文件路径

        根据给定的 `scene_file` 设置插件的场景文件路径。该路径用于指定渲染任务中使用的 Maya 场景文件。若文件不存在，将抛出 `FileNotFoundError`。

        :param scene_file: 场景文件路径，类型为字符串（`str`），表示场景文件的完整路径。
            - 场景文件通常是一个 `.mb` 或 `.ma` 格式的 Maya 场景文件，包含了渲染任务所需的所有元素和设置。
        :raises FileNotFoundError: 如果指定的场景文件不存在，将抛出此异常。
        :return: 返回当前对象 (`MayaPluginBuilder`)，以支持链式调用。
        """
        if not os.path.exists(scene_file):
            raise FileNotFoundError(scene_file)
        self.plugin_data['SceneFile'] = scene_file
        return self

    def set_version(self, version: Union[MayaVersion, str]) -> 'MayaPluginBuilder':
        """
        设置Maya版本

        根据给定的 `version` 设置插件的Maya版本。该版本信息用于指定渲染任务使用的Maya版本，确保任务与相应的Maya版本兼容。

        :param version: Maya版本，类型为 `MayaVersion` 枚举，表示目标Maya版本。
            - `MayaVersion` 枚举通常包含不同的 Maya 版本（如 2018、2019、2020 等），用于指示渲染任务在哪个版本的 Maya 环境中运行。
        :return: 返回当前对象 (`MayaPluginBuilder`)，以支持链式调用。
        """
        self.plugin_data['Version'] = version.value if isinstance(version, MayaVersion) else version
        return self

    @property
    def data(self) -> Dict[str, Any]:
        return self.plugin_data
