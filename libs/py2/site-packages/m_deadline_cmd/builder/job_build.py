# -*- coding: utf-8 -*-
from typing import Union, List, Dict

from m_deadline_cmd.modules.dataclass import PluginName, SingleFrame, FrameRange
from .job_plugin_base import JobPluginBase


class SubmitJobBuild(JobPluginBase):
    def __init__(self):
        super().__init__()
        self.job_data = {}

    def set_plugin_name(self, plugin_name: PluginName) -> 'SubmitJobBuild':
        """
        设置插件名称

        将给定的插件名称存储在 `self.job_data["Plugin"]` 中。

        :param plugin_name: 插件名称，类型为 `PluginName`
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["Plugin"] = plugin_name.name
        return self

    def set_frames(self, frames: Union[SingleFrame, List[SingleFrame], FrameRange, str]) -> 'SubmitJobBuild':
        """
        设置帧数（可以是单帧、帧列表或帧范围）

        根据传入的 `frames` 参数类型，更新 `self.job_data["Frames"]` 的值。

        :param frames: 可以是单帧（SingleFrame），帧列表（List[SingleFrame]）或帧范围（FrameRange）
            - 如果是单帧，直接将其转换为整数并存入 "Frames"。
            - 如果是帧列表，将列表中的每一帧转换为字符串并连接成逗号分隔的字符串。
            - 如果是帧范围，直接将帧范围对象存入 "Frames"。
        :raises TypeError: 如果 `frames` 不是上述三种类型中的任何一种，则抛出类型错误。

        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        if isinstance(frames, SingleFrame):
            self.job_data["Frames"] = int(frames)
        elif isinstance(frames, list):
            if isinstance(frames[0], SingleFrame):
                self.job_data["Frames"] = ','.join([str(i) for i in frames])
        elif isinstance(frames, FrameRange):
            self.job_data["Frames"] = str(frames)
        else:
            self.job_data["Frames"] = str(frames)

        return self

    def set_name(self, name: str) -> 'SubmitJobBuild':
        """
        设置任务名称

        将给定的任务名称存储在 `self.job_data["Name"]` 中。

        :param name: 任务名称，类型为字符串（`str`）。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["Name"] = name
        return self

    def set_comment(self, comment: str) -> 'SubmitJobBuild':
        """
        设置任务注释

        将给定的注释文本存储在 `self.job_data["Comment"]` 中。

        :param comment: 评论文本，类型为字符串（`str`），用于描述任务的附加信息。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["Comment"] = comment
        return self

    def set_department(self, department: str) -> 'SubmitJobBuild':
        """
        设置任务部门

        将给定的部门名称存储在 `self.job_data["Department"]` 中。
        指定该职位所属的部门。这只是一种将职位分组的方法，不会以任何方式影响渲染（默认为空白）。

        :param department: 部门名称，类型为字符串（`str`），表示任务所属的部门。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["Department"] = department
        return self

    def set_batch_name(self, batch_name: str) -> 'SubmitJobBuild':
        """
        设置批次名称

        将给定的批次名称存储在 `self.job_data["BatchName"]` 中。
        指定一个可选名称，以便将作业逻辑地分组在一起（默认值为空白）

        :param batch_name: 批次名称，类型为字符串（`str`），用于标识任务所属的批次。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["BatchName"] = batch_name
        return self

    def set_user(self, user: str) -> 'SubmitJobBuild':
        """
        设置用户名

        将给定的用户名存储在 `self.job_data["UserName"]` 中。
        指定作业的用户（默认 = 当前用户）。

        :param user: 用户名，类型为字符串（`str`），用于标识提交任务的用户。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["UserName"] = user
        return self

    def set_machine_name(self, machine_name: str) -> 'SubmitJobBuild':
        """
        设置机器名称

        将给定的机器名称存储在 `self.job_data["MachineName"]` 中。
        指定提交作业的机器（默认 = 当前机器）。

        :param machine_name: 机器名称，类型为字符串（`str`），用于标识提交任务的机器。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["MachineName"] = machine_name
        return self

    def set_pool(self, pool_name: str) -> 'SubmitJobBuild':
        """
        设置任务池名称

        将给定的任务池名称存储在 `self.job_data["Pool"]` 中。
        指定提交作业的池（默认值 = 无）。

        :param pool_name: 任务池名称，类型为字符串（`str`），用于指定任务所属的池。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["Pool"] = pool_name
        return self

    def set_second_pool(self, second_pool_name: str) -> 'SubmitJobBuild':
        """
        设置备用任务池名称

        将给定的备用任务池名称存储在 `self.job_data["SecondaryPool"]` 中。

        :param second_pool_name: 备用任务池名称，类型为字符串（`str`），用于指定任务的备用池。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["SecondaryPool"] = second_pool_name
        return self

    def set_group(self, group_name: str) -> 'SubmitJobBuild':
        """
        设置任务组名称

        将给定的任务组名称存储在 `self.job_data["Group"]` 中。
        指定提交作业的组（默认值 = none）。

        :param group_name: 任务组名称，类型为字符串（`str`），用于指定任务所属的组。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["Group"] = group_name
        return self

    def set_priority(self, priority: int) -> 'SubmitJobBuild':
        """
        设置任务优先级

        将给定的任务优先级存储在 `self.job_data["Priority"]` 中。

        :param priority: 任务优先级，类型为整数（`int`），用于指定任务的优先级。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["Priority"] = priority
        return self

    def set_chunk_size(self, chunk_size: int) -> 'SubmitJobBuild':
        """
        设置任务的分块大小

        将给定的分块大小存储在 `self.job_data["ChunkSize"]` 中。
        指定每个任务渲染多少帧（默认值 = 1）。

        :param chunk_size: 分块大小，类型为整数（`int`），用于指定任务处理的分块数量或每块的数据量。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["ChunkSize"] = chunk_size
        return self

    def set_protected(self, protected: bool) -> 'SubmitJobBuild':
        """
        设置任务是否受保护
        如果启用，则只有作业的用户、超级用户或属于有权处理受保护作业的用户组的用户才能删除作业。其他用户将无法删除该作业，Deadline 的自动清理功能也无法清理该作业。

        根据传入的布尔值 `protected`，将任务的保护状态存储在 `self.job_data["Protected"]` 中。
        - 如果 `protected` 为 `True`，表示任务受到保护。
        - 如果 `protected` 为 `False`，表示任务不受保护。

        :param protected: 布尔值，表示任务是否受保护。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        if protected:
            self.job_data["Protected"] = True
        else:
            self.job_data["Protected"] = False
        return self

    def set_machine_limit(self, machine_limit: int) -> 'SubmitJobBuild':
        """
        指定此作业可同时渲染的最大机器数量（默认值 = 0，表示无限制）。

        将给定的机器限制值存储在 `self.job_data["MachineLimit"]` 中，表示该任务可以使用的最大机器数量。

        :param machine_limit: 机器限制数量，类型为整数（`int`），用于指定任务的机器最大数量。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["MachineLimit"] = machine_limit
        return self

    def set_allow_workers(self, allow_worker_list: List[str]) -> 'SubmitJobBuild':
        """
        指定哪些 Worker 在作业的允许列表中（默认值为空白）。如果同时指定了允许列表和拒绝列表，则仅使用允许列表。

        将给定的允许工作机器名称列表转换为逗号分隔的字符串，并存储在 `self.job_data["Allowlist"]` 中。

        :param allow_worker_list: 允许的工作机器名称列表，类型为字符串列表（`List[str]`），包含所有可以执行任务的机器名称。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["Allowlist"] = ','.join(allow_worker_list)
        return self

    def set_deny_list(self, deny_list: List[str]) -> 'SubmitJobBuild':
        """
        指定哪些 Worker 在作业的拒绝列表中（默认值为空白）。如果同时指定了允许列表和拒绝列表，则仅使用允许列表。

        将给定的禁止工作机器名称列表转换为逗号分隔的字符串，并存储在 `self.job_data["Denylist"]` 中。

        :param deny_list: 禁止的工作机器名称列表，类型为字符串列表（`List[str]`），包含所有不允许执行任务的机器名称。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["Denylist"] = ','.join(deny_list)
        return self

    def set_pre_job_script(self, py_path: str) -> 'SubmitJobBuild':
        """
        指定作业最初开始渲染时执行的 Python 脚本的完整路径（默认 = 空白）。

        将给定的前置脚本路径存储在 `self.job_data["PreJobScript"]` 中。该脚本将在任务开始前执行。

        :param py_path: 前置脚本路径，类型为字符串（`str`），指向要在任务开始前执行的 Python 脚本。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["PreJobScript"] = py_path
        return self

    def set_post_job_script(self, py_path: str) -> 'SubmitJobBuild':
        """
        指定作业完成时执行的 Python 脚本的完整路径（默认 = 空白）。

        将给定的后置脚本路径存储在 `self.job_data["PostJobScript"]` 中。该脚本将在任务完成后执行。

        :param py_path: 后置脚本路径，类型为字符串（`str`），指向要在任务完成后执行的 Python 脚本。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["PostJobScript"] = py_path
        return self

    def set_pre_task_script(self, py_path: str) -> 'SubmitJobBuild':
        """
        指定在每个任务开始渲染之前执行的 Python 脚本的完整路径（默认值为空白）。

        将给定的前置任务脚本路径存储在 `self.job_data["PreTaskScript"]` 中。该脚本将在任务的每个子任务开始前执行。

        :param py_path: 前置任务脚本路径，类型为字符串（`str`），指向要在每个子任务开始前执行的 Python 脚本。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["PreTaskScript"] = py_path
        return self

    def set_post_task_script(self, py_path: str) -> 'SubmitJobBuild':
        """
        指定每个任务完成后执行的 Python 脚本的完整路径（默认值为空白）。

        将给定的后置任务脚本路径存储在 `self.job_data["PostTaskScript"]` 中。该脚本将在任务的每个子任务完成后执行。

        :param py_path: 后置任务脚本路径，类型为字符串（`str`），指向要在每个子任务完成后执行的 Python 脚本。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        self.job_data["PostTaskScript"] = py_path
        return self

    def set_environment(self, env: Dict[str, str]) -> 'SubmitJobBuild':
        """
        指定作业渲染时要设置的环境变量。此选项已编号，从 0（EnvironmentKeyValue0）开始，以处理多个环境变量。对于每个附加变量，
        只需增加数字（EnvironmentKeyValue1、EnvironmentKeyValue2 等）。请注意，这些变量仅适用于渲染过程，因此它们不会在作业之间持续存在。

        将给定的环境变量字典 `env` 转换为一系列键值对，并将其存储在 `self.job_data` 中。每个环境变量会被存储为一个以 `EnvironmentKeyValue` 为前缀的键，格式为 `key=value`。

        :param env: 环境变量字典，类型为 `Dict[str, str]`，其中每个键是环境变量的名称，每个值是环境变量的值。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        index = 0
        for key, value in env.items():
            self.job_data[f"EnvironmentKeyValue{index}"] = f"{key}={value}"
            index += 1
        return self

    def set_extra_info_key(self, extra_info: Dict[str, str]) -> 'SubmitJobBuild':
        """
        这些是附加的任意属性。指定的数量没有限制，但它们在监视器中没有对应的列。

        将给定的额外信息字典 `extra_info` 转换为一系列键值对，并将其存储在 `self.job_data` 中。每个额外信息项会被存储为一个以 `ExtraInfoKeyValue` 为前缀的键，格式为 `key=value`。

        :param extra_info: 额外信息字典，类型为 `Dict[str, str]`，其中每个键是额外信息项的名称，每个值是该项的值。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        index = 0
        for key, value in extra_info.items():
            self.job_data[f"ExtraInfoKeyValue{index}"] = f"{key}={value}"
            index += 1
        return self

    def set_output_directory(self, output_directory: List[str]) -> 'SubmitJobBuild':
        """
        指定作业的输出图像目录（默认为空白）。这允许监视器在作业列表中显示“浏览输出”上下文菜单选项。如果文件名是完整路径，
        则不需要 OutputDirectory# 选项。此选项已编号，从 0（OutputDirectory0）开始，
        以处理每帧的多个输出目录。对于每个附加目录，只需增加数字（OutputDirectory1、OutputDirectory2 等）（任何作业类型）。

        将给定的输出目录列表 `output_directory` 中的每个目录路径存储在 `self.job_data` 中，使用 `OutputDirectory{index}` 作为键进行存储。每个目录路径会根据其索引被单独存储。

        :param output_directory: 输出目录列表，类型为 `List[str]`，包含多个任务生成文件的目录路径。
        :return: 返回当前对象 (`SubmitJobBuild`)，以支持链式调用。
        """
        for index, path in enumerate(output_directory):
            self.job_data[f"OutputDirectory{index}"] = path
        return self

    def set_output_filename(self, output_filename: List[str]) -> 'SubmitJobBuild':
        for index, path in enumerate(output_filename):
            self.job_data[f"OutputFilename{index}"] = path
        return self

    @property
    def data(self) -> Dict[str, str]:
        return self.job_data
