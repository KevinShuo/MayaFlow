# -*- coding: utf-8 -*-
import os.path
from typing import Tuple

from m_deadline_cmd.builder.job_build import SubmitJobBuild
from m_deadline_cmd.builder.job_plugin_base import JobPluginBase
from m_deadline_cmd.builder.maya_plugin_build import MayaPluginBuilder
from m_deadline_cmd.modules.dataclass import PluginName, ArnoldVerbose, RenderType


class MayaBatchDirector(JobPluginBase):
    def __init__(self, project_path: str, output_path: str, render_camera: str, render_layer: str,
                 width_height: Tuple[int, int], frame: str, image_prefix: str, priority: int, group: str,
                 maya_version: str):
        super().__init__()
        self.project_path = project_path
        self.output_path = output_path
        self.render_camera = render_camera
        self.render_layer = render_layer
        self.width, self.height = width_height
        self.frame = frame
        self.image_prefix = image_prefix
        self.priority = priority
        self.group = group
        self.maya_version = maya_version
        self.file_path, self.file_name_ext = os.path.split(self.project_path)
        self.job_build = SubmitJobBuild()
        self.plugin_build = MayaPluginBuilder()

    def submit(self):
        self.create_job()
        self.create_plugin_info()
        print(self.submit_task())

    def create_job(self):
        file_name = os.path.splitext(self.file_name_ext)[0]
        (self.job_build
        .set_name(f"{file_name} - {self.render_camera.split('|')[-2]} - {self.render_layer}")
        .set_plugin_name(PluginName.MayaBatch)
        .set_group(self.group)
        .set_batch_name(file_name)
        .set_frames(self.frame)
        .set_output_directory([self.output_path])
        .set_priority(self.priority)
        .set_environment(
            {"MAYA_MODULE_PATH": r"\\192.168.2.222\CentralizedTools\pipeline\maya_pipeline\plugins\Modules",
             "OCIO": r"C:\aces_1.2\config.ocio"}))

        self.create_cache(self.job_path, self.job_build.data)

    def create_plugin_info(self):
        (self.plugin_build
         .set_animation(True)
         .set_camera(self.render_camera)
         .set_arnold_verbose(ArnoldVerbose.Info)
         .set_render(RenderType.Arnold)
         .set_scene_file(self.project_path)
         .set_project_path(self.file_path)
         .set_output_file_path(self.output_path)
         .set_output_file_prefix(self.image_prefix)
         .set_render_layer(self.render_layer)
         .set_width_height(self.width, self.height)
         .set_version(self.maya_version))
        self.create_cache(self.plugin_path, self.plugin_build.data)

    def __del__(self):
        os.remove(self.job_path)
        os.remove(self.plugin_path)
        if not os.path.isdir(self.job_path) and not os.path.exists(self.plugin_path):
            print(f"Removing {os.path.abspath(self.job_path)} and {os.path.abspath(self.plugin_path)} succeeded.")
