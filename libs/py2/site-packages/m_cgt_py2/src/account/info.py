# -*- coding: utf-8 -*-
import json


class AccountData:
    def __init__(self, id, name, cn_name, department, image):
        self.id = id
        self.name = name
        self.cn_name = cn_name
        self.department = department
        self.image = image

    def __hash__(self):
        return hash(self.id)


class CGTAccountPy2(object):
    def __init__(self, login_strategy):
        self.t_tw = login_strategy.login()

    def get_account_with_name(self, cn_name):
        """
            用中文名获取账号信息
        Args:
            cn_name:  中文名

        Returns:

        """
        id_list = self.t_tw.info.get_id("public" "account", filter_list=[["account.status", "=", "Y"], "and",
                                                                         ["account.name", "=", cn_name]])
        if not id_list:
            return None
        data = self.t_tw.info.get("public" "account", id_list, field_sign_list=self.fields)[0]
        return AccountData(id=data['account.id'],
                           name=data['account.entity'],
                           cn_name=data["account.name"],
                           department=data['account.department'],
                           image=json.loads(
                               data["account.image"] if data["account.image"] else "[]"))

    def get_all_accounts(self):
        """
            获取所有激活账号信息
        :return:
        """
        id_list = self.t_tw.info.get_id("public","account", filter_list=[["account.status", "=", "Y"]])
        data_list = self.t_tw.info.get("public", "account", id_list=id_list,
                                       field_sign_list=self.fields)
        return tuple(sorted([AccountData(id=data["account.id"],
                                         name=data["account.entity"],
                                         cn_name=data["account.name"],
                                         department=data["account.department"],
                                         image=json.loads(data["account.image"])
                                         if data["account.image"] else "") for data in data_list],
                            key=lambda x: x.name))

    def get_account_id(self, account):
        id_list = self.t_tw.info.get_id("public", "account",
                                        filter_list=[["account.status", "=", "Y"], "and",
                                                     ["account.entity", "=", account]])
        if not id_list:
            return None
        return id_list[0]

    @property
    def fields(self):
        fields = self.t_tw.info.fields("public", "account")
        return fields

    @property
    def current_user(self):
        return self.t_tw.login.account()
