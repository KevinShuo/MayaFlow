# -*- coding: utf-8 -*-
class CGTTask(object):
    def __init__(self, project_db, task_id, login_strategy, module):
        self.project_db = project_db
        self.task_id = task_id
        self.t_tw = login_strategy.login()
        self.module = module

    def get_sign_dir_rule(self, sign_dir):
        data = self.t_tw.task.get_sign_filebox(self.project_db, self.module, self.task_id, filebox_sign=sign_dir)
        if not data:
            raise AttributeError("sign dir error")
        return data["rule"]

    def publish_file(self, files_list, sign_dir, note=None):
        """
            提交文件

        :param files_list: 提交文件列表
        :param sign_dir: 提交文本框标识符
        :param note: note信息
        :return:
        """
        version = self.get_current_version()
        self.t_tw.task.publish(self.project_db, self.module, self.task_id, files_list, filebox_sign=sign_dir,
                               version=version if version else "001", note=note if note else "")
        return True

    def get_current_version(self):
        """
            获取当前版本号

        :raises AttributeError: 当任务id获取不到数据时候，触发诧异
        :return: 001 / 002
        """
        fields = self.t_tw.version.fields(self.project_db)
        version_id = self.t_tw.version.get_id(self.project_db, filter_list=[["#link_id", "=", self.task_id]])
        if not version_id:
            return None

        version_data = self.t_tw.version.get(self.project_db, id_list=version_id, field_list=fields)
        if not version_data:
            return None
        max_version = sorted(version_data, key=lambda x: x["entity"], reverse=True)[0]
        return max_version["entity"]

    def create_note(self, text):
        """
            创建note记录
             [{"type":"text","content":"te"}, {"type":"a","title":"aa","url":"g:/1.jpg"}, {"type":"image","path":"1.jpg"},\
            {"type":"attachment","path":"1.txt"}]
        Args:
            text:

        Returns:

        """
        return self.t_tw.note.create(self.project_db, self.module, "task", [self.task_id], text)

    def send_message(self, account_id_list, content, **kwargs):
        """
            [{"type":"text","content":"te"},{"type":"a","title":"aa","url":"g:/1.jpg"}, {"type":"image","path":"1.jpg"},\
            {"type":"attachment","path":"1.txt"}]

        :param account_id_list: 通知账号
        :param content: 通知内容
        :param important: 是否是重要消息
        :return:
        """
        return self.t_tw.task.send_msg(self.project_db, self.module, self.task_id, account_id_list,
                                       content) if not kwargs.get("important") else self.t_tw.task.send_msg(
            self.project_db, self.module, self.task_id, account_id_list, content, kwargs.get("important"))

    def update_task_status(self, status, note=""):
        self.t_tw.task.update_task_status(self.project_db, self.module, [self.task_id], status, note)

    @property
    def versions(self):
        version_id_lists = self.t_tw.version.get_id(self.project_db, [["#link_id", "=", self.task_id]])
        if not version_id_lists:
            return None
        fields = self.t_tw.version.fields(self.project_db)
        return self.t_tw.version.get(self.project_db, version_id_lists, fields)

    @property
    def notes(self):
        note_id_list = self.t_tw.note.get_id(self.project_db, [["#link_id", "=", self.task_id]])
        if not note_id_list:
            return None
        fields = self.t_tw.note.fields(self.project_db)
        return self.t_tw.note.get(self.project_db, note_id_list, fields)

    @property
    def artist_account(self):
        return self.t_tw.task.get(self.project_db, self.module, [self.task_id], ["task.account"])[0]["task.account"]

    @property
    def task_name(self):
        return self.t_tw.task.get(self.project_db, self.module, [self.task_id], ["task.entity"])[0]["task.entity"]
